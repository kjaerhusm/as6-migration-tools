name: Build and Release (CalVer)

permissions:
  contents: write

concurrency:
  group: as6-migration-tools-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_ui: ${{ steps.ver.outputs.version_ui }}
      version_tag: ${{ steps.ver.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - id: ver
        name: Compute CalVer (Europe/Copenhagen) + SHA7
        shell: bash
        run: |
          export TZ=Europe/Copenhagen
          TS=$(date +'%Y.%m.%d.%H%M')           # e.g. 2025.08.27.1109
          SHA7=$(git rev-parse --short=7 HEAD)  # e.g. abc1234
          echo "version_ui=${TS}+g${SHA7}" >> "$GITHUB_OUTPUT"   # for UI/EXE
          echo "version_tag=v${TS}" >> "$GITHUB_OUTPUT"          # for Release tag
          echo "UI: ${TS}+g${SHA7}  TAG: v${TS}"

  build:
    needs: prepare
    runs-on: windows-latest
    outputs:
      built_sha: ${{ steps.meta.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Write version.txt for runtime embedding
        shell: pwsh
        run: |
          '${{ needs.prepare.outputs.version_ui }}' | Set-Content -Encoding utf8 version.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        env:
          RELEASE_VERSION: ${{ needs.prepare.outputs.version_ui }}   # e.g. 2025.08.27.1109+gabc1234
        run: pyinstaller --noconfirm gui_launcher.spec

      - name: Zip only the EXE (exclude version.txt)
        shell: pwsh
        run: |
          if (!(Test-Path "dist\as6-migration-tools.exe")) { Write-Error "EXE not found in dist" }
          if (Test-Path "dist\as6-migration-tools.zip") { Remove-Item "dist\as6-migration-tools.zip" -Force }
          Compress-Archive -Path "dist\as6-migration-tools.exe" -DestinationPath "dist\as6-migration-tools.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/as6-migration-tools.zip

      - name: Capture built commit SHA
        id: meta
        shell: bash
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  release:
    needs: [build, prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.built_sha }}
          fetch-depth: 0

      # Optional sanity check of auto "Source code" archive
      - name: Sanity check auto-archive will have content
        run: |
          git archive --format=zip -o /tmp/auto.zip ${{ needs.build.outputs.built_sha }}
          unzip -l /tmp/auto.zip
          COUNT=$(unzip -Z1 /tmp/auto.zip | wc -l)
          if [ "$COUNT" -lt 5 ]; then
            echo "Auto-generated archive looks too small (files: $COUNT). Check .gitattributes export-ignore rules."
            exit 1
          fi

      - name: Download GUI artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release

      - name: Generate changelog since last release
        id: notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Determine repo
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Base = latest non-draft, non-prerelease tag
            let baseTag = null;
            try {
              const last = await github.rest.repos.getLatestRelease({ owner, repo });
              baseTag = last.data.tag_name; // e.g. v2025.10.08.0930
              core.info(`Previous release: ${baseTag}`);
            } catch (e) {
              core.info('No previous release found (initial release).');
            }

            // Head = the commit you built in the build job (squash-merge on main)
            const head = `${{ needs.build.outputs.built_sha }}`;

            let md = '## Changes\n\n';
            if (!baseTag) {
              md += 'Initial release.\n';
            } else {
              const cmp = await github.rest.repos.compareCommitsWithBasehead({
                owner, repo, basehead: `${baseTag}...${head}`
              });

              const commits = (cmp.data.commits || []).map(c => {
                const sha   = c.sha.substring(0,7);
                const title = (c.commit.message || '').split('\n')[0];
                const who   = c.author?.login || c.commit?.author?.name || 'unknown';
                return `- \`${sha}\` ${title} (@${who})`;
              }).join('\n') || '- No commits';

              const files = (cmp.data.files || []).map(f => {
                const ad = f.additions ?? 0;
                const de = f.deletions ?? 0;
                return `- **${(f.status || '').toUpperCase()}** ${f.filename} (+${ad}/-${de})`;
              }).join('\n') || '- No file changes';

              md += `**Commits since ${baseTag}:**\n${commits}\n\n`;
              md += `**Changed files:**\n${files}\n`;
            }

            core.setOutput('markdown', md)

      # Save the markdown as an artifact (use heredoc to preserve formatting)
      - name: Save changelog artifact
        shell: bash
        run: |
          # Write the multi-line Markdown exactly as-is (no shell expansion)
          cat > release-notes.md <<'EOF'
          ${{ steps.notes.outputs.markdown }}
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

      # Generate a SHA-256 checksum for the release ZIP
      - name: Generate checksum for the ZIP
        shell: bash
        run: |
          cd release
          sha256sum as6-migration-tools.zip > as6-migration-tools.zip.sha256
          cat as6-migration-tools.zip.sha256

      - name: Create GitHub Release (CalVer tag)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version_tag }}                 # vYYYY.MM.DD.HHMM
          target_commitish: ${{ needs.build.outputs.built_sha }}
          name: "AS6 Migration Tools ${{ needs.prepare.outputs.version_ui }}" # 2025.08.27.1109+gabc1234
          make_latest: true
          prerelease: false
          generate_release_notes: false
          body: |
            âœ… This release contains:
            - The latest GUI tool (`as6-migration-tools.zip`)
            - Auto-generated source archives by GitHub (see "Source code" links)
            
            ${{ steps.notes.outputs.markdown }}
          files: |
            release/as6-migration-tools.zip
            release/as6-migration-tools.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
