name: Build and Release (CalVer)

permissions:
  contents: write

concurrency:
  group: as6-migration-tools-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_ui: ${{ steps.ver.outputs.version_ui }}
      version_tag: ${{ steps.ver.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - id: ver
        name: Compute CalVer (Europe/Copenhagen) + SHA7
        shell: bash
        run: |
          export TZ=Europe/Copenhagen
          TS=$(date +'%Y.%m.%d.%H%M')           # e.g. 2025.08.27.1109
          SHA7=$(git rev-parse --short=7 HEAD)  # e.g. abc1234
          echo "version_ui=${TS}+g${SHA7}" >> "$GITHUB_OUTPUT"   # for UI/EXE
          echo "version_tag=v${TS}" >> "$GITHUB_OUTPUT"          # for Release tag
          echo "UI: ${TS}+g${SHA7}  TAG: v${TS}"

  build:
    needs: prepare
    runs-on: windows-latest
    outputs:
      built_sha: ${{ steps.meta.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Write version.txt for runtime embedding
        shell: pwsh
        run: |
          '${{ needs.prepare.outputs.version_ui }}' | Set-Content -Encoding utf8 version.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        env:
          RELEASE_VERSION: ${{ needs.prepare.outputs.version_ui }}   # e.g. 2025.08.27.1109+gabc1234
        run: pyinstaller --noconfirm gui_launcher.spec

      - name: Zip only the EXE (exclude version.txt)
        shell: pwsh
        run: |
          if (!(Test-Path "dist\as6-migration-tools.exe")) { Write-Error "EXE not found in dist" }
          if (Test-Path "dist\as6-migration-tools.zip") { Remove-Item "dist\as6-migration-tools.zip" -Force }
          Compress-Archive -Path "dist\as6-migration-tools.exe" -DestinationPath "dist\as6-migration-tools.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/as6-migration-tools.zip

      - name: Capture built commit SHA
        id: meta
        shell: bash
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  release:
    needs: [ build, prepare ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.built_sha }}
          fetch-depth: 0

      # Optional sanity check of auto "Source code" archive
      - name: Sanity check auto-archive will have content
        run: |
          git archive --format=zip -o /tmp/auto.zip ${{ needs.build.outputs.built_sha }}
          unzip -l /tmp/auto.zip
          COUNT=$(unzip -Z1 /tmp/auto.zip | wc -l)
          if [ "$COUNT" -lt 5 ]; then
            echo "Auto-generated archive looks too small (files: $COUNT). Check .gitattributes export-ignore rules."
            exit 1
          fi

      - name: Download GUI artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release

      - name: Create GitHub Release (CalVer tag)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version_tag }}                 # vYYYY.MM.DD.HHMM
          target_commitish: ${{ needs.build.outputs.built_sha }}
          name: "AS6 Migration Tools ${{ needs.prepare.outputs.version_ui }}" # 2025.08.27.1109+gabc1234
          make_latest: true
          prerelease: false
          body: |
            âœ… This release contains:
            - The latest GUI tool (`as6-migration-tools.zip`)
            - Auto-generated source archives by GitHub (see "Source code" links)
          files: |
            release/as6-migration-tools.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------- switch to a real branch for commits ----------------------
      - name: Checkout main for badge commit
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      # -------------------------------------------------------------------------------------

      # --- Persist lifetime downloads and runs backup, then commit ---
      - name: Update lifetime downloads and runs backup badges
        env:
          REPO_FULL: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Keep your existing live runs badge; this is only a backup snapshot
          ABACUS_URL: https://abacus.jasoncameron.dev/get/as6-migration-tools-6f2a48c7/run-clicks
        run: |
          python - << 'PY'
          import json, os, urllib.request, datetime, pathlib

          repo = os.environ["REPO_FULL"]
          token = os.environ["GITHUB_TOKEN"]
          abacus_url = os.environ.get("ABACUS_URL", "").strip()

          history_path = pathlib.Path("downloads/history.json")
          badge_dl_path = pathlib.Path("badges/lifetime-downloads.json")
          runs_hist_path = pathlib.Path("metrics/runs_history.json")
          runs_badge_path = pathlib.Path("badges/runs.json")

          for p in (history_path.parent, badge_dl_path.parent, runs_hist_path.parent):
            p.mkdir(parents=True, exist_ok=True)

          def gh(url: str):
            req = urllib.request.Request(url, headers={
              "Authorization": f"Bearer {token}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28",
              "User-Agent": "as6-migration-tools-badges"
            })
            with urllib.request.urlopen(req, timeout=30) as r:
              return json.loads(r.read().decode())

          # --- Update downloads history (sum of max observed per asset id) ---
          history = {"assets": {}, "last_updated": None}
          if history_path.exists():
            try:
              history = json.loads(history_path.read_text(encoding="utf-8"))
            except Exception:
              pass
          assets = history.get("assets", {})

          page = 1
          while True:
            releases = gh(f"https://api.github.com/repos/{repo}/releases?per_page=100&page={page}")
            if not releases:
              break
            for rel in releases:
              tag = rel.get("tag_name") or ""
              for a in rel.get("assets", []):
                aid = str(a["id"])
                current = int(a.get("download_count") or 0)
                entry = assets.get(aid, {"name": a.get("name"), "release_tag": tag, "max_downloads": 0})
                if current > int(entry.get("max_downloads", 0)):
                  entry["max_downloads"] = current
                entry["name"] = a.get("name")
                entry["release_tag"] = tag
                assets[aid] = entry
            page += 1

          history["assets"] = assets
          history["last_updated"] = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
          history_path.write_text(json.dumps(history, indent=2, ensure_ascii=False), encoding="utf-8")

          lifetime_total = sum(int(v.get("max_downloads", 0)) for v in assets.values())
          badge_dl = {
            "schemaVersion": 1,
            "label": "downloads",
            "message": f"{lifetime_total:,} total",
            "color": "blue"
          }
          badge_dl_path.write_text(json.dumps(badge_dl, indent=2), encoding="utf-8")

          # --- Optional runs backup (monotonic max from external counter) ---
          if abacus_url:
            try:
              with urllib.request.urlopen(abacus_url, timeout=20) as r:
                data = json.loads(r.read().decode())
              current_runs = int(data.get("value", 0))
            except Exception:
              current_runs = None

            runs_hist = {"max": 0, "last_updated": None}
            if runs_hist_path.exists():
              try:
                runs_hist = json.loads(runs_hist_path.read_text(encoding="utf-8"))
              except Exception:
                pass

            if current_runs is not None and current_runs > runs_hist.get("max", 0):
              runs_hist["max"] = current_runs
            runs_hist["last_updated"] = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
            runs_hist_path.write_text(json.dumps(runs_hist, indent=2), encoding="utf-8")

            runs_badge = {
              "schemaVersion": 1,
              "label": "runs",
              "message": f"{runs_hist.get('max', 0):,} total",
              "color": "informational"
            }
            runs_badge_path.write_text(json.dumps(runs_badge, indent=2), encoding="utf-8")
          PY

      - name: Commit badge updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add downloads/history.json badges/lifetime-downloads.json metrics/runs_history.json badges/runs.json 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "No badge changes."
          else
            git commit -m "Update lifetime downloads / runs backup badges after release"
            git push
          fi
  
